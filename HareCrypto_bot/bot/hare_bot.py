import asyncio
import logging
import sqlite3
from datetime import datetime
import aioschedule  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

# –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, MessageEntity

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
from admin_panel import admin_panel, in_admin_panel, admin_inline, first_launch
from config import admin_id
# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
from defs import get_admin_list, log, user_logger, get_moder_list, chat_logger, hot_notification, page_output
from extensions import Token, Event_List, Message_Mem, check_repeated_message, Page_Mem
import files
from mod_panel import moder_panel, in_moder_panel, moder_inline

dateFormatter = "%d.%m.%Y %H:%M"

# –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º start, help, event
last_message_start = Message_Mem()
last_message_help = Message_Mem()
last_message_event = Message_Mem()
# –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
last_page = Page_Mem()

# log
logging.basicConfig(level=logging.INFO)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
with Token() as tg_token:
    bot = Bot(token=tg_token)
dp = Dispatcher(bot)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if message.chat.type == 'private':
        user_logger(message.chat.id)
        await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.chat.username}!\n",
                               reply_markup=ReplyKeyboardRemove())
        add_bot_ingroup = InlineKeyboardMarkup()
        add_bot_ingroup.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É',
                                                 url='http://t.me/HareCrypta_bot?startgroup=botstart'))
        await bot.send_message(message.chat.id, "–Ø HareCrypta-–±–æ—Ç!\n–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è "
                                                "–∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ –∫—Ä–∏–ø—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö!\n"
                                                "–ü–æ –∫–æ–º–∞–Ω–¥–µ /help –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "
                                                "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=add_bot_ingroup)
        await log(f'User {message.chat.id} started bot')
    else:
        await check_repeated_message(bot, message, last_message_start)

        user_logger(message.from_user.id)
        try:
            chat_logger(message.chat.id, message.chat.title, message.chat.username)
        except:
            chat_logger(message.chat.id, message.chat.title)
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!\n"
                                                "–Ø HareCrypta-–±–æ—Ç!\n–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è "
                                                "–∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ –∫—Ä–∏–ø—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö!\n"
                                                "–ü–æ –∫–æ–º–∞–Ω–¥–µ /help –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "
                                                "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                               reply_markup=ReplyKeyboardRemove())
        await log(f'Member {message.from_user.id} from the group {message.chat.id} started bot')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help
@dp.message_handler(commands=['help'])
async def process_start_command(message: types.Message):
    await check_repeated_message(bot, message, last_message_help)

    if message.chat.type == 'private':
        user_logger(message.chat.id)
        await bot.send_message(message.chat.id, "–Ø HareCrypto-–±–æ—Ç!\n"
                                                "–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ, "
                                                "—Ç–∞–∫–∏–µ –∫–∞–∫ NFT –º–∏–Ω—Ç—ã, ICO, –∫—Ä–∞—É–¥–ª–æ–Ω—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. \n"
                                                "–ü–æ –∫–æ–º–∞–Ω–¥–µ /event –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å–æ–±—ã—Ç–∏–π.\n\n"
                                                "–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ https://t.me/harecrypt\n"
                                                "‚Ä¢–ß–∞—Ç‚úçÔ∏è:  https://t.me/harecrypta_chat - —á–∞—Ç –≥–µ–º–æ–≤-–ª—é–¥–µ–π\n"
                                                "‚Ä¢–ö–∞–Ω–∞–ª‚úçÔ∏è: https://t.me/HareCrypta_lab_ann - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∏–¥–µ–π.\n"
                                                "‚Ä¢YouTube: https://www.youtube.com/c/HareCrypta\n"
                                                "‚Ä¢Inst: https://instagram.com/harecrypta - –∏–Ω—Å—Ç–∞\n")
    else:
        user_logger(message.from_user.id)
        try:
            chat_logger(message.chat.id, message.chat.title, message.chat.username)
        except:
            chat_logger(message.chat.id, message.chat.title)

        await bot.send_message(message.chat.id, "–Ø HareCrypto-–±–æ—Ç!\n"
                                                "–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ, "
                                                "—Ç–∞–∫–∏–µ –∫–∞–∫ NFT –º–∏–Ω—Ç—ã, ICO, –∫—Ä–∞—É–¥–ª–æ–Ω—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n"
                                                "–ü–æ –∫–æ–º–∞–Ω–¥–µ /event –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å–æ–±—ã—Ç–∏–π.\n\n"
                                                "–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ https://t.me/harecrypt\n"
                                                "‚Ä¢–ß–∞—Ç‚úçÔ∏è:  https://t.me/harecrypta_chat - —á–∞—Ç –≥–µ–º–æ–≤-–ª—é–¥–µ–π\n"
                                                "‚Ä¢–ö–∞–Ω–∞–ª‚úçÔ∏è: https://t.me/HareCrypta_lab_ann - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∏–¥–µ–π.\n"
                                                "‚Ä¢YouTube: https://www.youtube.com/c/HareCrypta\n"
                                                "‚Ä¢Inst: https://instagram.com/harecrypta - –∏–Ω—Å—Ç–∞\n")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã event
# –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
@dp.message_handler(commands=["event"])
async def event_handler(message: types.Message):
    await check_repeated_message(bot, message, last_message_event)

    events, entity_list, inline_paginator = await page_output(message, last_page, 1)

    await bot.send_message(message.chat.id, events, entities=entity_list, reply_markup=inline_paginator)

    if message.chat.type == 'private':
        await log(f'User {message.chat.id} requested events list')
    else:
        await log(f'Member {message.from_user.id} from the group {message.chat.id} requested events list')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã adm
# –≤—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=["adm"])
async def admin_handler(message: types.Message):
    if message.chat.type == 'private':
        user_logger(message.chat.id)
        if message.chat.id == admin_id and await first_launch(bot, message.chat.id) is True:
            await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã –ê–¥–º–∏–Ω!")
            await log(f'User {message.chat.id} successfully requested admin panel')
        elif (message.chat.id == admin_id or message.chat.id in get_admin_list()) and \
                await first_launch(bot, message.chat.id) is False:
            await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!")
            await log(f'User {message.chat.id} successfully requested admin panel')
            await admin_panel(bot, message.chat.id)
        else:
            await bot.send_message(message.chat.id, "–í—ã –Ω–µ –ê–¥–º–∏–Ω!")
            await log(f'User {message.chat.id} unsuccessfully requested admin panel')
    else:
        user_logger(message.from_user.id)
        try:
            chat_logger(message.chat.id, message.chat.title, message.chat.username)
        except:
            chat_logger(message.chat.id, message.chat.title)
        await bot.send_message(message.chat.id, "ü§®")
        await log(f'Member {message.from_user.id} from the group {message.chat.id} requested admin panel')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã mod
# –≤—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
# (–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∞–¥–º–∏–Ω–æ–º, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–¥—Ä–µ–∑–∞–Ω –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π)
@dp.message_handler(commands=["mod"])
async def moder_handler(message: types.Message):
    if message.chat.type == 'private':
        user_logger(message.chat.id)
        if message.chat.id in get_moder_list():
            await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!")
            await log(f'User {message.chat.id} successfully requested moderator panel')
            await moder_panel(bot, message.chat.id)
        else:
            await bot.send_message(message.chat.id, "–í—ã –Ω–µ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!")
            await log(f'User {message.chat.id} unsuccessfully requested moderator panel')
    else:
        user_logger(message.from_user.id)
        try:
            chat_logger(message.chat.id, message.chat.title, message.chat.username)
        except:
            chat_logger(message.chat.id, message.chat.title)
        await bot.send_message(message.chat.id, "ü§®")
        await log(f'Member {message.from_user.id} from the group {message.chat.id} requested admin panel')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
# –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
# –≤—Ö–æ–¥ –≤ –º–æ–¥ –ø–∞–Ω–µ–ª—å
@dp.message_handler(content_types=["text"])
async def actions_handler(message: types.Message):
    if message.chat.type == 'private':
        if message.chat.id == admin_id or message.chat.id in get_admin_list():
            await in_admin_panel(bot, message.chat.id, message)
        elif message.chat.id in get_moder_list():
            await in_moder_panel(bot, message.chat.id, message)
    else:
        pass


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω —Å–æ–±—ã—Ç–∏–π DELETE
@dp.inline_handler(lambda query: len(query.query) > 0)
async def query_text(query):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="test"))
    results = []
    single_msg = types.InlineQueryResultArticle(
        id="1", title="Press me",
        input_message_content=types.InputTextMessageContent(message_text="–Ø ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞"),
        reply_markup=kb
    )
    results.append(single_msg)
    await bot.answer_inline_query(query.id, results)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def callback(callback_query: types.CallbackQuery):
    if callback_query.message:
        if callback_query.message.chat.type == 'private':
            if callback_query.message.chat.id in get_admin_list():
                await admin_inline(bot, callback_query.data, callback_query.message.chat.id,
                                   callback_query.message.message_id)
            elif callback_query.message.chat.id in get_moder_list():
                await moder_inline(bot, callback_query.data, callback_query.message.chat.id,
                                   callback_query.message.message_id)

            if callback_query.data == "forward":
                page_num = last_page.last_page[callback_query.message.message_id - 1] + 1

                if callback_query.message.message_id - 1 in last_page.last_page.keys() and page_num != 7:
                    last_page.last_page[callback_query.message.message_id - 1] += 1
                    page_num = last_page.last_page[callback_query.message.message_id-1]

                    events, entity_list, inline_paginator = \
                        await page_output(callback_query.message, last_page, page_num)

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                message_id=callback_query.message.message_id,
                                                text=events, entities=entity_list, reply_markup=inline_paginator)
                elif callback_query.message.message_id-1 in last_page.last_page.keys() and page_num == 7:
                    last_page.last_page[callback_query.message.message_id - 1] = 1
                    page_num = last_page.last_page[callback_query.message.message_id - 1]

                    events, entity_list, inline_paginator = \
                        await page_output(callback_query.message, last_page, page_num)

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                message_id=callback_query.message.message_id,
                                                text=events, entities=entity_list, reply_markup=inline_paginator)

            if callback_query.data == "backward":
                page_num = last_page.last_page[callback_query.message.message_id-1] - 1

                if callback_query.message.message_id - 1 in last_page.last_page.keys() and page_num != 0:
                    last_page.last_page[callback_query.message.message_id - 1] -= 1
                    page_num = last_page.last_page[callback_query.message.message_id - 1]

                    events, entity_list, inline_paginator = \
                        await page_output(callback_query.message, last_page, page_num)

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                message_id=callback_query.message.message_id,
                                                text=events, entities=entity_list, reply_markup=inline_paginator)
                elif callback_query.message.message_id - 1 in last_page.last_page.keys() and page_num == 0:
                    last_page.last_page[callback_query.message.message_id - 1] = 6
                    page_num = last_page.last_page[callback_query.message.message_id - 1]

                    events, entity_list, inline_paginator = \
                        await page_output(callback_query.message, last_page, page_num)

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                message_id=callback_query.message.message_id,
                                                text=events, entities=entity_list, reply_markup=inline_paginator)

            await bot.answer_callback_query(callback_query.id)

        else:
            if callback_query.data == "forward":
                page_num = last_page.last_page[callback_query.message.message_id - 1] + 1

                if callback_query.message.message_id - 1 in last_page.last_page.keys() and page_num != 7:
                    last_page.last_page[callback_query.message.message_id - 1] += 1
                    page_num = last_page.last_page[callback_query.message.message_id - 1]

                    events, entity_list, inline_paginator = \
                        await page_output(callback_query.message, last_page, page_num)

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                message_id=callback_query.message.message_id,
                                                text=events, entities=entity_list, reply_markup=inline_paginator)
                elif callback_query.message.message_id - 1 in last_page.last_page.keys() and page_num == 7:
                    last_page.last_page[callback_query.message.message_id - 1] = 1
                    page_num = last_page.last_page[callback_query.message.message_id - 1]

                    events, entity_list, inline_paginator = \
                        await page_output(callback_query.message, last_page, page_num)

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                message_id=callback_query.message.message_id,
                                                text=events, entities=entity_list, reply_markup=inline_paginator)

            if callback_query.data == "backward":
                page_num = last_page.last_page[callback_query.message.message_id - 1] - 1

                if callback_query.message.message_id - 1 in last_page.last_page.keys() and page_num != 0:
                    last_page.last_page[callback_query.message.message_id - 1] -= 1
                    page_num = last_page.last_page[callback_query.message.message_id - 1]

                    events, entity_list, inline_paginator = \
                        await page_output(callback_query.message, last_page, page_num)

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                message_id=callback_query.message.message_id,
                                                text=events, entities=entity_list, reply_markup=inline_paginator)
                elif callback_query.message.message_id - 1 in last_page.last_page.keys() and page_num == 0:
                    last_page.last_page[callback_query.message.message_id - 1] = 6
                    page_num = last_page.last_page[callback_query.message.message_id - 1]

                    events, entity_list, inline_paginator = \
                        await page_output(callback_query.message, last_page, page_num)

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                message_id=callback_query.message.message_id,
                                                text=events, entities=entity_list, reply_markup=inline_paginator)

            await bot.answer_callback_query(callback_query.id)

    elif callback_query.inline_message_id:
        if callback_query.data == "test":
            await bot.edit_message_text(inline_message_id=callback_query.inline_message_id,
                                        text="INLINE MODE")


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
async def check_old_events():
    con = sqlite3.connect(files.main_db)
    cursor = con.cursor()
    events_list = Event_List()

    try:
        cursor.execute("SELECT name, description, date, name_entities, description_entities, "
                       "type_event FROM events;")
    except:
        cursor.execute("CREATE TABLE events (id INT, name TEXT, "
                       "description TEXT, date DATETIME, name_entities JSON, description_entities JSON, "
                       "type_event TEXT);")
    else:
        now = datetime.now()

        for name, description, date, name_entities, description_entities, type_event in cursor.fetchall():
            if date == 'TBA':
                events_list.events_unsorted.update({(name, description, date, name_entities,
                                                     description_entities, type_event): 'TBA'})
            else:
                date_formatted = datetime.strptime(date, "%d.%m.%Y %H:%M")
                delta = date_formatted - now
                delta = divmod(delta.total_seconds(), 3600)
                events_list.events_unsorted.update({(name, description, date, name_entities,
                                                     description_entities, type_event): int(delta[0])})

        for events_key, events_value in events_list.events_unsorted.items():
            name = events_key[0]

            if events_value == 'TBA':
                continue
            if events_value < -336:
                cursor.execute("DELETE FROM events WHERE name = " + "'" + str(name) + "';")
                con.commit()

        con.close()


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –æ—Å—Ç–∞–µ—Ç—Å—è –ª–∏ 59 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è)
async def check_hot_events():
    con = sqlite3.connect(files.main_db)
    cursor = con.cursor()

    try:
        cursor.execute("SELECT name, description, date, name_entities, description_entities, "
                       "type_event FROM events;")
    except:
        cursor.execute("CREATE TABLE events (id INT, name TEXT, "
                       "description TEXT, date DATETIME, name_entities JSON, description_entities JSON, "
                       "type_event TEXT);")
    else:
        now = datetime.now()

        for name, description, date, name_entities, description_entities, type_event in cursor.fetchall():
            if date == 'TBA':
                continue
            else:
                date_formatted = datetime.strptime(date, "%d.%m.%Y %H:%M")
                delta = date_formatted - now
                delta = divmod(delta.total_seconds(), 60)
                event = (name, description, date, name_entities, description_entities, type_event)
                if delta[0] == 59:
                    await hot_notification(bot, event)

        con.close()


# —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á
async def scheduler():
    aioschedule.every().day.at("00:00").do(check_old_events)
    aioschedule.every(1).minutes.do(check_hot_events)

    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(10)


# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–µ
async def on_startup(_):
    asyncio.create_task(scheduler())


# –≤—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
